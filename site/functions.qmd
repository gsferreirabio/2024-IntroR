---
title: "Functions"
---

Using functions is a great way to generalize and automatize processes. R comes with several basic functions implemented in packages (which are basic collections of functions and objects) such as *stats* and *graphics*. Functions will usually take arguments provided by the user based on which they will perform an action. It is always important to read the Help page of a function to learn which arguments are possible and how to use them.

For example, you can use a function to generate a sequence more complex than just by using 1:10 using the arguments *by* and *length.out* of the function *seq*:

```{r}
seq(from = 1, to = 20, by = 2)  ## increment the sequence by 2
seq(from = 1, to = 20, length.out = 5)  ## only 5 numbers between 1 and 20
```

A sequence can also be created by repetitions using the function *rep* and defining arguments as *each* (each element is repeated *x* times) and *times* (the sequence is repeated *x* times).

```{r}
rep(1:4, each = 2)
rep(c("cat", "dog", "mouse"), times = 2)
rep(c("cat", "dog", "mouse"), times = 1:3)

```

We saw before that a logical operation can be made for each element in a vector using logical operators. If you want to check whether *all* or *any* elements fit a certain criterium you can use the functions:
```{r}
vec.1 <- c(2, 4, 6)
all(vec.1<4)
any(vec.1<4)
```

The base packages in R also include functions to perform more complex but very useful calculations, such as logarithms (with different bases) and antilogs, square roots, sums, means and medians.
```{r}
log(42)  ## natural log
log10(42)  ## base 10 log
exp(3.73767)  ## antilog
X = 13^2
sqrt(X) == 13

vec <- seq(1, 100, by = 2)
sum(vec)
mean(vec)
median(vec)
```
Checking the range of values in a list, the minimum and maximum values, and the length of this list can be very useful. As well as sorting a list or selecting which values correspond to a criterium.
```{r}
range(vec)
max(vec)
min(vec)
length(vec)
sort(vec)
rev(vec)
which(vec == 3)  ## gives the position in the list
```
We saw before how to see the class of an object using the *class()* function, but we can also check whether an object is from a specific class using the group of functions "is.X":
```{r}
is.numeric(vec)
is.character(vec)
```
**Factor** is an object type that represent categorical variables. They have a determined number *levels* (categories), and some functions can be used to check those.
```{r}
color.names <- factor(c("black", "white", "pink", "pink", "white", "white"))
class(color.names)
length(color.names)
levels(color.names)

length(levels(color.names))

# there is also a function to do that
nlevels(color.names)
```
Let's say you want to calculate the mean value of a sequence that contains NA. This will return an NA: 
```{r}
y <- c(4, NA, 7)
mean(y)
```
So, you need to deal with this NA before obtaining this mean value. You can identify its position and manually remove it, but this becomes impracticable as the dimensions of an object increase. You can replace the NA by another value, using the ifelse() function, but that will change the original data. Alternatively, you can omit the NAs from the calculation, either before (using the function na.omit()) or with an argument implemented in the mean() function:
```{r}
# Option 1. Manually removing NAs. Try to understand the series of code here
is.na(y)  ## tells you which positions are NAs
y[!is.na(y)]
y.removed <- y[!is.na(y)]  
y.removed
mean(y.removed)

# Option 2. Replacing NAs
y.replaced <- ifelse(test = is.na(y), yes = 0, no = y) 
y.replaced
mean(y.replaced)

# Option 3. Omitting NAs
y.omit <- na.omit(y)
y.omit
mean(y.omit)

# Option 4. Use an argument in mean()
mean(y, na.rm = TRUE)
```
On the next section we will see how you can write your own function.

### Packages

In this section we will install and load packages to use their functions.
Packages available on the official R repository (the CRAN repository) can be installed using the function:
```{r, eval = FALSE}
install.packages("ggplot2")
```

Installing a package does not make it readly available, they first need to be loaded on the session. 
```{r}
library(ggplot2)
```

